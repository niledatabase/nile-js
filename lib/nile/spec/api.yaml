openapi: 3.0.1
info:
  title: Nile API
  description: Making SaaS chill.
  contact:
    email: support@thenile.dev
  version: 0.1-296b8c8
servers:
- url: localhost:8080
paths:
  /workspaces/{workspace}/orgs/{org}/access/policies:
    get:
      tags:
      - access
      summary: List all access policies
      operationId: listPolicies
      parameters:
      - $ref: '#/components/parameters/workspace'
      - name: org
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: A list of all access policies in this organization
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Policy'
    post:
      tags:
      - access
      summary: Create a new access policy
      description: |
        Access policies allow your users to set up access controls for entities in their organization. All Access is determined based on 3 inputs:
        1. Subject: who is trying to act (think User)
        2. Resource: on what are they acting (for now, only instances and access policies themselves are supported)
        3. Action: what are they doing (think Read, Write, Deny)

        Note that the creator of an organization is automatically granted access to all access policies in the organization
        regardless of the access policies defined.

        Also note that once a user creates an access policy their organization defaults to deny-by-default behavior
        for all users in the organization.
      operationId: createPolicy
      parameters:
      - $ref: '#/components/parameters/workspace'
      - name: org
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePolicyRequest'
        required: true
      responses:
        "201":
          description: The newly created access policy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
  /workspaces/{workspace}/orgs/{org}/access/policies/{policyId}:
    get:
      tags:
      - access
      summary: Get an access policy
      operationId: getPolicy
      parameters:
      - $ref: '#/components/parameters/workspace'
      - name: org
        in: path
        required: true
        schema:
          type: string
      - name: policyId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The access policy with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
    put:
      tags:
      - access
      summary: Update an access policy
      operationId: updatePolicy
      parameters:
      - $ref: '#/components/parameters/workspace'
      - name: org
        in: path
        required: true
        schema:
          type: string
      - name: policyId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePolicyRequest'
        required: true
      responses:
        "200":
          description: Updated version of the access policy with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
    delete:
      tags:
      - access
      summary: Delete an access policy
      operationId: deletePolicy
      parameters:
      - $ref: '#/components/parameters/workspace'
      - name: org
        in: path
        required: true
        schema:
          type: string
      - name: policyId
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Successful instance deletion
  /auth/login:
    post:
      tags:
      - developers
      summary: Log in a developer to nile
      operationId: loginDeveloper
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/LoginInfo'
        required: true
      responses:
        "200":
          description: JWT token for authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/validate:
    post:
      tags:
      - developers
      summary: Validate a developer token
      operationId: validateDeveloper
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Token'
        required: true
      responses:
        "204":
          description: valid token
        "400":
          description: invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/oauth/google/callback:
    get:
      tags:
      - developers
      summary: Developer Google OAuth flow callback
      description: |
        This endpoint is called automatically by Google after the user authenticates successfully.
        It's here for documentation purposes only, and it shouldn't be called directly.
      operationId: developerGoogleOAuthCallback
      parameters:
      - name: code
        in: query
        schema:
          type: string
      - name: state
        in: query
        schema:
          type: string
      responses:
        "200":
          description: A successful login/signup for a developer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeveloperGoogleOAuthResponse'
        "302":
          description: |2
             A redirect to the specified `redirect_to` URL after a successful
             login/signup for a developer, if `redirect_to` was provided
             when calling `/auth/oauth/google`. A response cookie
             containing the developer's auth credentials will be set.
  /auth/oauth/google:
    get:
      tags:
      - developers
      summary: Starts the developer Google OAuth flow
      operationId: startDeveloperGoogleOAuth
      parameters:
      - name: redirect_to
        in: query
        description: An optional URL to redirect to after a successful login/signup.
        schema:
          type: string
          format: uri
      responses:
        "302":
          description: |
            A redirect to Google for the user to authenticate.
            After the user authenticates successfully, you'll be redirected to `/auth/oauth/google/callback`.
  /workspaces/{workspace}/auth/login:
    post:
      tags:
      - users
      summary: Log in a user
      description: "Login a user to Nile. This operation returns a JWT token. Most\
        \ Nile operations require authentication and expect this token in the 'Authorization:\
        \ Bearer <token>' header"
      operationId: loginUser
      parameters:
      - $ref: '#/components/parameters/workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInfo'
        required: true
      responses:
        "200":
          description: JWT token for authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-code-samples:
      - lang: cURL
        source: "curl -X POST https://app.thenile.dev:443/auth/login -H 'Content-Type:\
          \ application/json' -D '{\"email\": \"shaun@colton.demo\",  \"password\"\
          : \"mycatname\"}"
      - lang: JS
        source: |-
          import Nile from "@theniledev/js";
          const nile = new Nile({ apiUrl: "http://localhost:8080", workspace: "1" });

          const body = {
            workspace: 56,
            loginInfo: {
              email: "shaun@colton.demo",
              password: "mycatname",
            },
          };

          nile
            .loginUser(body)
            .then((data) => {
              console.log("API called successfully. Returned data: " + data);
            })
            .catch((error: any) => console.error(error));
  /workspaces/{workspace}/auth/validate:
    post:
      tags:
      - users
      summary: Validate a user Token
      description: "Validates a user token. Use this when using Nile authentication\
        \ to validate access to non-Nile resources. See the [Add Authentication Guide](https://nile-docs.vercel.app/docs/current/guides/how-to/add_signup_authn#decorating-the-endpoint)\
        \ for a full example"
      operationId: validateUser
      parameters:
      - $ref: '#/components/parameters/workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Token'
        required: true
      responses:
        "204":
          description: The token is valid
        "400":
          description: The token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-code-samples:
      - lang: cURL
        source: "curl -X POST https://app.thenile.dev:443/auth/validate  -H 'Content-Type:\
          \ application/json' -D '{\"token\": \"token\"}'"
      - lang: JS
        source: |-
          import Nile from "@theniledev/js";

          const nile = new Nile({ apiUrl: "http://localhost:8080", workspace: "1" });

          const body = {
            workspace: 56,
            token: { token: "token" },
          };

          nile
            .validateUserToken(body)
            .then((data) => {
              console.log("API called successfully. Returned data: " + data);
            })
            .catch((error: any) => console.error(error));
  /developers:
    post:
      tags:
      - developers
      summary: Create a developer
      operationId: createDeveloper
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        "201":
          description: The newly created developer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /workspaces/{workspace}/entities:
    get:
      tags:
      - entities
      summary: List all Entities
      operationId: listEntities
      parameters:
      - $ref: '#/components/parameters/workspace'
      responses:
        "200":
          description: list of entities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entity'
    post:
      tags:
      - entities
      summary: Create Entity
      operationId: createEntity
      parameters:
      - $ref: '#/components/parameters/workspace'
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateEntityRequest'
        required: true
      responses:
        "200":
          description: created entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
  /workspaces/{workspace}/entities/{type}:
    get:
      tags:
      - entities
      summary: Get Entity
      operationId: getEntity
      parameters:
      - $ref: '#/components/parameters/workspace'
      - name: type
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: the entity with the requested type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
    put:
      tags:
      - entities
      summary: Update an Entity
      operationId: updateEntity
      parameters:
      - $ref: '#/components/parameters/workspace'
      - name: type
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateEntityRequest'
        required: true
      responses:
        "200":
          description: the updated entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
  /workspaces/{workspace}/entities/{type}/openapi:
    get:
      tags:
      - entities
      summary: Get a yaml OpenAPI description of an entity
      operationId: getOpenAPI
      parameters:
      - $ref: '#/components/parameters/workspace'
      - name: type
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The yaml OpenAPI description of the specified entity
          content:
            application/yaml:
              schema:
                type: string
  /workspaces/{workspace}/events/{type}:
    get:
      tags:
      - entities
      summary: Get instance events
      operationId: instance.events
      parameters:
      - $ref: '#/components/parameters/workspace'
      - name: type
        in: path
        required: true
        schema:
          type: string
      - name: seq
        in: query
        schema:
          type: integer
          format: int64
          default: 0
      - name: limit
        in: query
        schema:
          maximum: 20
          type: integer
          format: int64
          default: 20
      responses:
        "200":
          description: Events for the type.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InstanceEvent'
  /workspaces/{workspace}/orgs/{org}/instances/{type}:
    get:
      tags:
      - entities
      summary: ' List all instances'
      operationId: listInstances
      parameters:
      - $ref: '#/components/parameters/workspace'
      - name: org
        in: path
        required: true
        schema:
          type: string
      - name: type
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: A list of all instances of the specified type under this org
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Instance'
    post:
      tags:
      - entities
      summary: Create a new Instance
      operationId: createInstance
      parameters:
      - $ref: '#/components/parameters/workspace'
      - name: org
        in: path
        required: true
        schema:
          type: string
      - name: type
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonSchemaInstance'
        required: true
      responses:
        "201":
          description: The newly created instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
  /workspaces/{workspace}/orgs/{org}/instances/{type}/{id}:
    get:
      tags:
      - entities
      summary: Get an instance
      operationId: getInstance
      parameters:
      - $ref: '#/components/parameters/workspace'
      - name: org
        in: path
        required: true
        schema:
          type: string
      - name: type
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The instance with the specified id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
    put:
      tags:
      - entities
      summary: Update an instance
      operationId: updateInstance
      parameters:
      - $ref: '#/components/parameters/workspace'
      - name: org
        in: path
        required: true
        schema:
          type: string
      - name: type
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInstanceRequest'
        required: true
      responses:
        "200":
          description: The updated instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
    delete:
      tags:
      - entities
      summary: Delete an instance
      operationId: deleteInstance
      parameters:
      - $ref: '#/components/parameters/workspace'
      - name: org
        in: path
        required: true
        schema:
          type: string
      - name: type
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Successful instance deletion
  /workspaces/{workspace}/instances/{type}:
    get:
      tags:
      - entities
      summary: ' List all instances'
      operationId: listInstancesInWorkspace
      parameters:
      - $ref: '#/components/parameters/workspace'
      - name: type
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: A list of all instances of the specified type under this workspace
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Instance'
  /workspaces/{workspace}/orgs/{org}/invites/{code}/accept:
    post:
      tags:
      - organizations
      summary: Accept an invite
      operationId: acceptInvite
      parameters:
      - $ref: '#/components/parameters/workspace'
      - name: org
        in: path
        required: true
        schema:
          type: string
      - name: code
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Successful invite acceptance
  /workspaces/{workspace}/orgs/{org}/invites:
    get:
      tags:
      - organizations
      summary: List all Invites
      operationId: listInvites
      parameters:
      - $ref: '#/components/parameters/workspace'
      - name: org
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: A list of all invites under this org
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Invite'
  /workspaces/{workspace}/orgs/{org}/users:
    get:
      tags:
      - organizations
      summary: List users in an organization
      operationId: listUsersInOrg
      parameters:
      - $ref: '#/components/parameters/workspace'
      - name: org
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The users in this organization
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
      - organizations
      summary: Add a user to an organization
      operationId: addUserToOrg
      parameters:
      - $ref: '#/components/parameters/workspace'
      - name: org
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AddUserToOrgRequest'
        required: true
      responses:
        "200":
          description: The user added to the organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /workspaces/{workspace}/orgs:
    get:
      tags:
      - organizations
      summary: List all Organizations
      operationId: listOrganizations
      parameters:
      - $ref: '#/components/parameters/workspace'
      responses:
        "200":
          description: A list of all orgs under this workspace
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
    post:
      tags:
      - organizations
      summary: Create a new organization
      operationId: createOrganization
      parameters:
      - $ref: '#/components/parameters/workspace'
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateOrganizationRequest'
        required: true
      responses:
        "201":
          description: The newly created organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
  /workspaces/{workspace}/orgs/{org}:
    get:
      tags:
      - organizations
      summary: Get an organization by name
      operationId: getOrganization
      parameters:
      - $ref: '#/components/parameters/workspace'
      - name: org
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The org with the specified name under this workspace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
    put:
      tags:
      - organizations
      summary: Update an organization
      operationId: updateOrganization
      parameters:
      - $ref: '#/components/parameters/workspace'
      - name: org
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateOrganizationRequest'
        required: true
      responses:
        "200":
          description: The updated org
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
    delete:
      tags:
      - organizations
      summary: Delete an organization by id
      operationId: deleteOrganization
      parameters:
      - $ref: '#/components/parameters/workspace'
      - name: org
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Successful org deletion
  /workspaces/{workspace}/orgs/{org}/users/{user}:
    put:
      tags:
      - organizations
      summary: Update a user in an organization
      operationId: updateUserInOrg
      parameters:
      - $ref: '#/components/parameters/workspace'
      - name: org
        in: path
        required: true
        schema:
          type: string
      - name: user
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateOrganizationMembershipRequest'
        required: true
      responses:
        "200":
          description: The updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /me:
    get:
      tags:
      - users
      description: Get information about current authenticated user
      operationId: me
      responses:
        "200":
          description: The currently authenticated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /me/token:
    get:
      tags:
      - users
      description: "Echoes the auth token for the current authenticated user. This\
        \ operation requires that theauth token is passed either as a Bearer token\
        \ in the authorization header or as a cookie named 'token'. When both are\
        \ present, they must match."
      operationId: token
      responses:
        "200":
          description: The auth token for the current authenticated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        "401":
          description: The current user is not authorized to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /workspaces/{workspace}/users:
    get:
      tags:
      - users
      summary: List all users for a workspace
      operationId: listUsers
      parameters:
      - $ref: '#/components/parameters/workspace'
      responses:
        "200":
          description: A list of all users under this workspace
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
      - users
      summary: Create a user
      operationId: createUser
      parameters:
      - $ref: '#/components/parameters/workspace'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        "201":
          description: The newly created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /workspaces/{workspace}/users/{id}:
    get:
      tags:
      - users
      summary: Get a user by id
      operationId: getUser
      parameters:
      - $ref: '#/components/parameters/workspace'
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: The user with the specified id under this workspace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
      - users
      summary: Update a user
      operationId: updateUser
      parameters:
      - $ref: '#/components/parameters/workspace'
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        required: true
      responses:
        "200":
          description: the updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
      - users
      summary: Delete a user
      operationId: deleteUser
      parameters:
      - $ref: '#/components/parameters/workspace'
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Successful user deletion
  /workspaces:
    get:
      tags:
      - workspaces
      summary: List all workspaces
      operationId: listWorkspaces
      responses:
        "200":
          description: A list of all workspaces
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workspace'
    post:
      tags:
      - workspaces
      summary: Create a workspace
      operationId: createWorkspace
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateWorkspaceRequest'
        required: true
      responses:
        "201":
          description: The newly created workspace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
components:
  schemas:
    Action:
      type: string
      description: The action to be allowed on the resource if an access policy is
        matched. The `deny` action is a special action that denies all access.
      enum:
      - read
      - write
      - deny
    Policy:
      required:
      - id
      - type
      type: object
      properties:
        id:
          type: string
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
        seq:
          type: integer
          format: int64
          readOnly: true
        type:
          type: string
          enum:
          - policy
        deleted:
          type: string
          format: date-time
          readOnly: true
        subject:
          $ref: '#/components/schemas/Subject'
        resource:
          $ref: '#/components/schemas/Resource'
        actions:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Action'
    Resource:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
      additionalProperties: true
      description: |
        A subset of properties of any custom or built-in entity instance to authorize against.
        Only exact matching of properties is supported for now.
        For built-in entity instances, only the "rule" entity is currently supported.
      example:
        id: inst_123
        type: cluster
        properties:
          region: us-west-2
          status: running
    Subject:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
      description: "A subset of properties of a user to authorize against. Only exact\
        \ matching is supported, for now."
    CreatePolicyRequest:
      required:
      - actions
      type: object
      properties:
        subject:
          $ref: '#/components/schemas/Subject'
        resource:
          $ref: '#/components/schemas/Resource'
        actions:
          minLength: 1
          uniqueItems: true
          type: array
          description: "The actions to be allowed on the resource if an access policy\
            \ matches a request. At least one action must be provided and executable\
            \ actions (i.e: `read`, `write`) cannot be combined with non-executable\
            \ actions (i.e: `deny`). If multiple access policies match a request,\
            \ policies with a `deny` action take precedence over policies with a `read`\
            \ action. You can define `deny` access policies to make exceptions in\
            \ your policies that allow access."
          items:
            $ref: '#/components/schemas/Action'
    UpdatePolicyRequest:
      type: object
      properties:
        subject:
          $ref: '#/components/schemas/Subject'
        resource:
          $ref: '#/components/schemas/Resource'
        actions:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Action'
    Token:
      required:
      - token
      type: object
      properties:
        token:
          type: string
          description: JWT authentication token. Most Nile operations the caller to
            pass a valid token in Authorization HTTP header using Bearer schema
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    Error:
      required:
      - error_code
      - message
      - status_code
      type: object
      properties:
        error_code:
          type: string
          enum:
          - internal_error
          - bad_request
          - unauthorized_credentials
          - user_not_found
          - org_not_found
          - workspace_not_found
          - invite_not_found
          - duplicate_org_name
          - duplicate_workspace_name
          - empty_org_name
          - empty_workspace_name
          - duplicate_user_email
          - user_already_in_org
          - duplicate_entity_name
          - entity_not_found
          - instance_not_found
          - access_policy_not_found
          - invalid_entity_schema
          - invalid_id
          - invalid_action
          - empty_actions
          - invalid_action_combination
          - forbidden
        message:
          type: string
        status_code:
          type: integer
          format: int32
    LoginInfo:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          description: The email of the user we are authenticating
          format: email
          example: shaun@colton.demo
        password:
          minLength: 1
          type: string
          description: The password of the user
          example: mycatname
    DeveloperGoogleOAuthResponse:
      required:
      - token
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          description: JWT authentication token. Most Nile operations the caller to
            pass a valid token in Authorization HTTP header using Bearer schema
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    Metadata:
      type: object
      description: Arbitrary metadata.
      example:
        internal_id: "12345"
        location: US
        age: 21
        is_admin: true
        name:
          first: John
          last: Doe
    OrgMembership:
      type: object
      properties:
        joined:
          type: string
          format: date-time
        metadata:
          $ref: '#/components/schemas/Metadata'
      example:
        joined: 2022-08-03T17:30:00.295581
        metadata:
          position: CEO
    User:
      required:
      - email
      - id
      - type
      type: object
      properties:
        id:
          type: string
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
        seq:
          type: integer
          format: int64
          readOnly: true
        type:
          type: string
          enum:
          - user
          - developer
          - nile_employee
        email:
          type: string
          format: email
        metadata:
          $ref: '#/components/schemas/Metadata'
        org_memberships:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/OrgMembership'
          example:
            org_02qaCO8qNEmfpAcomojhLb:
              joined: 2022-08-09T10:27:30.956079
              metadata:
                role: admin
            org_02qdS9KPAnG6Pt5XFAomu6:
              joined: 2022-08-03T17:30:00.295581
              metadata:
                role: member
    CreateUserRequest:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          minLength: 1
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
    Entity:
      required:
      - id
      - name
      - schema
      - type
      type: object
      properties:
        id:
          type: string
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
        seq:
          type: integer
          format: int64
          readOnly: true
        type:
          type: string
          enum:
          - entity
        name:
          type: string
          example: clusters
        schema:
          $ref: '#/components/schemas/JsonSchema'
    JsonSchema:
      type: object
      description: A JSON Schema
      example:
        type: object
        properties:
          id:
            type: string
          memory:
            type: integer
          cpus:
            type: integer
    CreateEntityRequest:
      required:
      - name
      - schema
      type: object
      properties:
        name:
          type: string
          example: clusters
        schema:
          $ref: '#/components/schemas/JsonSchema'
    UpdateEntityRequest:
      required:
      - schema
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/JsonSchema'
    Instance:
      required:
      - id
      - properties
      - type
      type: object
      properties:
        id:
          type: string
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
        seq:
          type: integer
          format: int64
          readOnly: true
        type:
          type: string
          description: The entity type of this instance
          example: clusters
        deleted:
          type: string
          format: date-time
          readOnly: true
        properties:
          $ref: '#/components/schemas/JsonSchemaInstance'
    InstanceEvent:
      required:
      - timestamp
      type: object
      properties:
        id:
          type: integer
          format: int32
        event_type:
          type: string
          enum:
          - CREATE
          - UPDATE
          - DELETE
        before:
          $ref: '#/components/schemas/Instance'
        after:
          $ref: '#/components/schemas/Instance'
        timestamp:
          type: string
          format: date-time
    JsonSchemaInstance:
      type: object
      description: An *instance* of a JSON Schema
      example:
        id: lkc-123
        memory: 4096
        cpus: 4
    UpdateInstanceRequest:
      required:
      - properties
      type: object
      properties:
        properties:
          $ref: '#/components/schemas/JsonSchemaInstance'
    Invite:
      required:
      - code
      - inviter
      - org
      - status
      type: object
      properties:
        code:
          type: string
        org:
          type: string
        inviter:
          type: string
        status:
          type: string
          enum:
          - active
    AddUserToOrgRequest:
      required:
      - email
      type: object
      properties:
        email:
          type: string
          format: email
        metadata:
          $ref: '#/components/schemas/Metadata'
    Organization:
      required:
      - creator
      - id
      - name
      - type
      type: object
      properties:
        id:
          type: string
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
        seq:
          type: integer
          format: int64
          readOnly: true
        type:
          type: string
          enum:
          - nile
          - organization
          - workspace
        name:
          type: string
        creator:
          type: string
          description: ID of the user who created this organization
    CreateOrganizationRequest:
      required:
      - name
      type: object
      properties:
        name:
          minLength: 1
          type: string
    UpdateOrganizationRequest:
      required:
      - name
      type: object
      properties:
        name:
          minLength: 1
          type: string
    UpdateOrganizationMembershipRequest:
      type: object
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
    UpdateUserRequest:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          minLength: 1
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
    Workspace:
      required:
      - id
      - name
      - type
      type: object
      properties:
        id:
          type: string
          readOnly: true
        created:
          type: string
          format: date-time
          readOnly: true
        updated:
          type: string
          format: date-time
          readOnly: true
        seq:
          type: integer
          format: int64
          readOnly: true
        type:
          type: string
          enum:
          - workspace
        name:
          type: string
    CreateWorkspaceRequest:
      required:
      - name
      type: object
      properties:
        name:
          type: string
  parameters:
    workspace:
      name: workspace
      in: path
      description: The name of the Nile workspace where all the data-plane metadata
        for this user is stored
      required: true
      schema:
        minLength: 1
        type: string
